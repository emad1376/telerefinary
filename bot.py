{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bcd832a0-98c9-46df-b8d7-c5fadea73da7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import telebot\n",
    "import os\n",
    "import fitz\n",
    "import pandas as pd\n",
    "import re\n",
    "\n",
    "TOKEN = os.getenv(\"BOT_TOKEN\")\n",
    "if not TOKEN:\n",
    "    raise ValueError(\"BOT_TOKEN environment variable is not set.\")\n",
    "\n",
    "bot = telebot.TeleBot(TOKEN, parse_mode='HTML')\n",
    "\n",
    "REFERENCE_EXCEL_PATH = 'ref-refinary.xlsx'\n",
    "if not os.path.exists(REFERENCE_EXCEL_PATH):\n",
    "    raise FileNotFoundError(f\"Reference Excel file not found: {REFERENCE_EXCEL_PATH}\")\n",
    "\n",
    "def extract_mid_rate(text, code):\n",
    "    pattern = rf'{re.escape(code)}\\s+(?:[\\d.]+[\\u2013\\-][\\d.]+\\s+)?([\\d.]+)'\n",
    "    match = re.search(pattern, text)\n",
    "    if match:\n",
    "        return match.group(1)\n",
    "    return 'Not Found'\n",
    "\n",
    "def extract_date(text):\n",
    "    match = re.search(r'December\\s+(\\d{1,2}),\\s+(\\d{4})', text)\n",
    "    if match:\n",
    "        day = int(match.group(1))\n",
    "        year = int(match.group(2))\n",
    "        return year, 12, day\n",
    "    return None\n",
    "\n",
    "def extract_and_format_rates(pdf_bytes):\n",
    "    df = pd.read_excel(REFERENCE_EXCEL_PATH)\n",
    "    with fitz.open(stream=pdf_bytes, filetype=\"pdf\") as doc:\n",
    "        full_text = \"\\n\".join([page.get_text() for page in doc])\n",
    "\n",
    "    date_parts = extract_date(full_text)\n",
    "    if date_parts:\n",
    "        gy, gm, gd = date_parts\n",
    "        date_str = f\"{gy:04d}/{gm:02d}/{gd:02d}\"\n",
    "        header = f\"<b>تاریخ:</b> {date_str}\\n\"\n",
    "    else:\n",
    "        header = \"<b>تاریخ:</b> نامشخص\\n\"\n",
    "\n",
    "    output_lines = [header]\n",
    "\n",
    "    for _, row in df.iterrows():\n",
    "        product = str(row.iloc[0]).strip()\n",
    "        code = str(row.iloc[2]).strip()\n",
    "        unit = str(row.iloc[1]).strip()\n",
    "        rate = extract_mid_rate(full_text, code)\n",
    "        output_lines.append(f\"<b>{product}</b>: {rate} {unit}\")\n",
    "\n",
    "    return \"\\n\".join(output_lines)\n",
    "\n",
    "@bot.message_handler(content_types=['document'])\n",
    "def handle_document(message):\n",
    "    try:\n",
    "        file_info = bot.get_file(message.document.file_id)\n",
    "        downloaded_file = bot.download_file(file_info.file_path)\n",
    "        response_text = extract_and_format_rates(downloaded_file)\n",
    "        bot.send_message(message.chat.id, response_text)\n",
    "    except Exception as e:\n",
    "        bot.send_message(message.chat.id, f\"خطا در پردازش فایل: {str(e)}\")\n",
    "\n",
    "@bot.message_handler(commands=['start', 'help'])\n",
    "def send_welcome(message):\n",
    "    welcome_text = (\n",
    "        \"سلام! به بات استخراج قیمت فرآورده‌های نفتی از مجله APAG خوش آمدید \\n\"\n",
    "        \"این بات می‌تونه در گروه‌ها هم استفاده بشه.\\n\"\n",
    "        \"\\n<b>فرمان‌ها:</b>\\n\"\n",
    "        \"/start - معرفی بات\\n\"\n",
    "        \"/help - راهنمای استفاده\\n\"\n",
    "        \"/menu - منو دسترسی سریع\"\n",
    "    )\n",
    "    bot.reply_to(message, welcome_text)\n",
    "\n",
    "@bot.message_handler(commands=['menu'])\n",
    "def send_menu(message):\n",
    "    menu_text = (\n",
    "        \"<b>منو دسترسی سریع:</b>\\n\"\n",
    "        \"• /start - معرفی بات\\n\"\n",
    "        \"• /help - راهنما\\n\"\n",
    "        \"• ارسال فایل PDF - استخراج نرخ محصولات\"\n",
    "    )\n",
    "    bot.send_message(message.chat.id, menu_text)\n",
    "\n",
    "@bot.my_chat_member_handler()\n",
    "def on_added_to_group(message):\n",
    "    if message.new_chat_member.user.id == bot.get_me().id:\n",
    "        bot.send_message(message.chat.id, \"سلام. بات استخراج داده‌های نفتی به گروه اضافه شد \")\n",
    "\n",
    "bot.infinity_polling()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
